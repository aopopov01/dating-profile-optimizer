# Secrets Management Strategy for Dating Profile Optimizer
# Comprehensive approach to handling sensitive data in production

secrets_management:
  # Overview
  strategy:
    principle: "zero-trust-secrets"
    rotation_policy: "automated"
    access_control: "least-privilege"
    audit_logging: "comprehensive"
    
  # Secret categories and handling
  secret_categories:
    # Database credentials
    database:
      postgres_master:
        username: "database/postgres/master/username"
        password: "database/postgres/master/password"
        rotation_frequency: "90d"
        complexity: "high"
        
      postgres_replica:
        username: "database/postgres/replica/username" 
        password: "database/postgres/replica/password"
        rotation_frequency: "90d"
        complexity: "high"
        
      redis:
        password: "cache/redis/auth/password"
        rotation_frequency: "60d"
        complexity: "high"
    
    # API keys and tokens
    external_apis:
      openai:
        api_key: "external/openai/api_key"
        rotation_frequency: "manual"  # Provider dependent
        monitoring: true
        
      stripe:
        secret_key: "payment/stripe/secret_key"
        webhook_secret: "payment/stripe/webhook_secret"
        rotation_frequency: "180d"
        
      cloudinary:
        api_key: "storage/cloudinary/api_key"
        api_secret: "storage/cloudinary/api_secret"
        rotation_frequency: "180d"
        
      mixpanel:
        token: "analytics/mixpanel/token"
        rotation_frequency: "360d"
    
    # Application secrets
    application:
      jwt_secret:
        path: "app/jwt/signing_key"
        rotation_frequency: "30d"
        algorithm: "RS256"
        key_size: 2048
        
      session_secret:
        path: "app/session/secret"
        rotation_frequency: "30d"
        complexity: "high"
        
      encryption_keys:
        data_encryption_key: "app/encryption/data_key"
        file_encryption_key: "app/encryption/file_key"
        rotation_frequency: "90d"
        
    # SSL/TLS certificates
    certificates:
      api_cert:
        private_key: "ssl/api/private_key"
        certificate: "ssl/api/certificate"
        rotation_frequency: "90d"  # Let's Encrypt
        
      monitoring_cert:
        private_key: "ssl/monitoring/private_key"
        certificate: "ssl/monitoring/certificate"
        rotation_frequency: "90d"
        
    # Monitoring and alerting
    monitoring:
      slack_webhooks:
        general: "notifications/slack/general/webhook"
        critical: "notifications/slack/critical/webhook"
        
      pagerduty:
        api_key: "alerting/pagerduty/api_key"
        service_keys:
          database: "alerting/pagerduty/database/service_key"
          api: "alerting/pagerduty/api/service_key"
          security: "alerting/pagerduty/security/service_key"

# Storage backends
storage_backends:
  # Primary: AWS Secrets Manager
  primary:
    type: "aws_secrets_manager"
    region: "us-east-1"
    encryption:
      kms_key_id: "arn:aws:kms:us-east-1:ACCOUNT:key/KEY-ID"
      encryption_algorithm: "AES-256"
    
    # Access control
    access_policy:
      production_role: "arn:aws:iam::ACCOUNT:role/DatingOptimizerProductionRole"
      admin_role: "arn:aws:iam::ACCOUNT:role/DatingOptimizerAdminRole"
      readonly_role: "arn:aws:iam::ACCOUNT:role/DatingOptimizerReadOnlyRole"
    
    # Automatic rotation
    auto_rotation:
      enabled: true
      lambda_function: "arn:aws:lambda:us-east-1:ACCOUNT:function:RotateSecrets"
      
  # Secondary: HashiCorp Vault
  secondary:
    type: "hashicorp_vault"
    address: "https://vault.datingoptimizer.com:8200"
    auth_method: "aws_iam"
    
    # Secret engines
    engines:
      kv: "secret/"
      database: "database/"
      pki: "pki/"
      
    # Policies
    policies:
      production: "production-policy"
      staging: "staging-policy"
      readonly: "readonly-policy"
      
  # Emergency backup: Kubernetes secrets
  backup:
    type: "kubernetes_secrets"
    namespace: "production"
    encryption_at_rest: true
    sealed_secrets: true

# Access control and authentication
access_control:
  # Identity providers
  identity_providers:
    # AWS IAM for cloud resources
    aws_iam:
      enabled: true
      roles:
        - "DatingOptimizerProductionRole"
        - "DatingOptimizerStagingRole"
        - "DatingOptimizerReadOnlyRole"
      
    # Service accounts for Kubernetes
    kubernetes_sa:
      enabled: true
      service_accounts:
        - name: "dating-api"
          namespace: "production"
          secrets: ["database", "external_apis", "application"]
        - name: "backup-service"
          namespace: "production"
          secrets: ["database", "storage"]
          
  # Authentication methods
  authentication:
    # IAM role assumption
    iam_roles:
      production_workload:
        trust_policy: "dating-optimizer-production-trust-policy.json"
        permissions: "dating-optimizer-secrets-access-policy.json"
        
    # Mutual TLS for service-to-service
    mtls:
      enabled: true
      ca_certificate: "pki/ca/certificate"
      client_certificates:
        - service: "dating-api"
          certificate: "pki/clients/dating-api/certificate"
        - service: "backup-service"
          certificate: "pki/clients/backup-service/certificate"
          
  # Authorization policies
  authorization:
    # RBAC for Kubernetes
    rbac:
      enabled: true
      roles:
        - name: "secrets-reader"
          permissions: ["get", "list"]
        - name: "secrets-writer"
          permissions: ["get", "list", "create", "update"]
          
    # IAM policies for AWS
    iam_policies:
      secrets_read_only:
        actions:
          - "secretsmanager:GetSecretValue"
          - "secretsmanager:DescribeSecret"
        resources: ["arn:aws:secretsmanager:*:*:secret:dating-optimizer/*"]
        
      secrets_full_access:
        actions:
          - "secretsmanager:*"
        resources: ["arn:aws:secretsmanager:*:*:secret:dating-optimizer/*"]

# Secret rotation
rotation:
  # Automated rotation schedules
  schedules:
    # High-frequency rotation
    critical_secrets:
      frequency: "30d"
      secrets:
        - "app/jwt/signing_key"
        - "app/session/secret"
      notification: "required"
      
    # Standard rotation
    standard_secrets:
      frequency: "90d"
      secrets:
        - "database/postgres/master/password"
        - "database/postgres/replica/password"
        - "app/encryption/data_key"
      notification: "optional"
      
    # Extended rotation
    stable_secrets:
      frequency: "180d"
      secrets:
        - "payment/stripe/secret_key"
        - "storage/cloudinary/api_secret"
      notification: "required"
      
  # Rotation procedures
  procedures:
    database_passwords:
      type: "blue_green"
      steps:
        1. "Create new password with high complexity"
        2. "Update database user with new password"
        3. "Update application configuration"
        4. "Test database connectivity"
        5. "Remove old password from secrets store"
      rollback: "automatic"
      
    jwt_signing_keys:
      type: "key_rotation"
      steps:
        1. "Generate new RSA key pair"
        2. "Update JWT service configuration"
        3. "Allow grace period for token expiry"
        4. "Remove old key from configuration"
      grace_period: "24h"
      
    api_keys:
      type: "provider_rotation"
      steps:
        1. "Generate new key via provider API"
        2. "Update application configuration"
        3. "Test API connectivity"
        4. "Deactivate old key via provider API"
      validation: "required"

# Monitoring and alerting
monitoring:
  # Secret access monitoring
  access_monitoring:
    log_all_access: true
    alert_thresholds:
      failed_attempts: 3
      unusual_access_patterns: true
      access_outside_hours: true
      
  # Secret lifecycle monitoring
  lifecycle_monitoring:
    expiry_alerts:
      warning_days: 30
      critical_days: 7
      
    rotation_status:
      overdue_rotations: "immediate"
      failed_rotations: "critical"
      
  # Compliance monitoring
  compliance_monitoring:
    unused_secrets: "weekly"
    over_privileged_access: "daily"
    audit_trail_integrity: "continuous"
    
  # Notification channels
  notifications:
    slack:
      webhook: "notifications/slack/secrets/webhook"
      channels:
        - "#security-alerts"
        - "#devops-notifications"
        
    email:
      recipients:
        - "security@datingoptimizer.com"
        - "devops@datingoptimizer.com"
        
    pagerduty:
      service_key: "alerting/pagerduty/secrets/service_key"
      escalation_policy: "security-escalation"

# Development and testing
development:
  # Development environment secrets
  dev_secrets:
    isolation: true
    mock_services: true
    separate_storage: true
    
  # Testing strategies
  testing:
    secret_rotation_testing: "automated"
    access_control_testing: "quarterly"
    disaster_recovery_testing: "semi-annually"
    
  # CI/CD integration
  cicd:
    # GitHub Actions secrets
    github_secrets:
      - "AWS_ACCESS_KEY_ID"
      - "AWS_SECRET_ACCESS_KEY"
      - "DOCKER_REGISTRY_PASSWORD"
    
    # Temporary secrets for builds
    build_secrets:
      lifetime: "2h"
      auto_cleanup: true
      
# Disaster recovery
disaster_recovery:
  # Secret backup and recovery
  backup:
    frequency: "daily"
    destinations:
      - "s3://dating-optimizer-secrets-backup/"
      - "vault-cluster-backup"
    encryption: "AES-256"
    
  # Recovery procedures
  recovery:
    rto: "1 hour"
    rpo: "1 hour"
    procedures:
      - "Restore from encrypted backup"
      - "Verify secret integrity"
      - "Update application configurations"
      - "Test secret functionality"
      
  # Cross-region replication
  replication:
    regions:
      - "us-west-2"
      - "eu-west-1"
    sync_frequency: "15min"
    consistency: "eventual"

# Compliance and audit
compliance:
  # Audit requirements
  audit:
    log_retention: "7 years"
    log_integrity: "cryptographic_hashing"
    regular_reviews: "quarterly"
    
  # Standards compliance
  standards:
    soc2: true
    iso27001: true
    gdpr: true
    pci_dss: false  # Not applicable
    
  # Documentation requirements
  documentation:
    secret_inventory: "maintained"
    access_matrix: "updated_monthly"
    rotation_records: "comprehensive"
    incident_logs: "detailed"

# Integration points
integrations:
  # Application integration
  application:
    sdk: "aws-sdk-js-v3"
    caching: "in-memory"
    cache_ttl: "300s"
    retry_logic: "exponential_backoff"
    
  # Infrastructure integration
  infrastructure:
    terraform: "aws_secretsmanager_secret"
    kubernetes: "external-secrets-operator"
    docker: "docker_secrets"
    
  # CI/CD integration
    cicd_systems:
      github_actions: "OIDC_authentication"
      jenkins: "vault_agent"
      
# Cost optimization
cost_optimization:
  # Storage optimization
  storage:
    compression: true
    deduplication: true
    tiered_storage: false  # Not applicable for secrets
    
  # Access optimization
  access:
    caching_strategies: "aggressive"
    batch_retrieval: true
    connection_pooling: true