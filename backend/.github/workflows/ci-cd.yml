name: Dating Profile Optimizer Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: production/dating-optimizer/backend

jobs:
  test:
    name: Run Tests and Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dating_optimizer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dating_optimizer_test
      run: npm run migrate

    - name: Run TypeScript compilation check
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier format check
      run: npm run format:check

    - name: Run unit tests with coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dating_optimizer_test
        JWT_SECRET: test-jwt-secret-for-ci
        OPENAI_API_KEY: test-openai-key
        CLOUDINARY_URL: cloudinary://test:test@test
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        flags: backend

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-scan:
    name: Security Vulnerability Scans
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name mobile-apps-cluster

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set deployment environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
          echo "NAMESPACE=dating-optimizer-production" >> $GITHUB_OUTPUT
          echo "REPLICAS=3" >> $GITHUB_OUTPUT
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
          echo "NAMESPACE=dating-optimizer-staging" >> $GITHUB_OUTPUT
          echo "REPLICAS=2" >> $GITHUB_OUTPUT
        fi

    - name: Create or update namespace
      run: |
        kubectl create namespace ${{ steps.env.outputs.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply namespace labels
        kubectl label namespace ${{ steps.env.outputs.NAMESPACE }} \
          environment=${{ steps.env.outputs.ENVIRONMENT }} \
          app=dating-optimizer \
          managed-by=github-actions \
          --overwrite

    - name: Deploy configuration and secrets
      env:
        NAMESPACE: ${{ steps.env.outputs.NAMESPACE }}
        ENVIRONMENT: ${{ steps.env.outputs.ENVIRONMENT }}
      run: |
        # Apply ConfigMaps
        kubectl apply -f k8s/backend/configmap.yaml -n $NAMESPACE
        
        # Create or update secrets from AWS Secrets Manager
        aws secretsmanager get-secret-value \
          --secret-id "$ENVIRONMENT/dating-optimizer/backend" \
          --query SecretString --output text | \
        kubectl create secret generic dating-optimizer-secrets \
          --from-file=/dev/stdin \
          --dry-run=client -o yaml | kubectl apply -f - -n $NAMESPACE

    - name: Deploy application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        NAMESPACE: ${{ steps.env.outputs.NAMESPACE }}
        ENVIRONMENT: ${{ steps.env.outputs.ENVIRONMENT }}
        REPLICAS: ${{ steps.env.outputs.REPLICAS }}
      run: |
        # Apply Kubernetes manifests with environment substitution
        envsubst < k8s/backend/deployment.yaml | kubectl apply -f - -n $NAMESPACE
        kubectl apply -f k8s/backend/service.yaml -n $NAMESPACE
        kubectl apply -f k8s/backend/hpa.yaml -n $NAMESPACE
        kubectl apply -f k8s/backend/ingress.yaml -n $NAMESPACE
        
        # Update deployment with new image
        kubectl set image deployment/dating-optimizer-backend \
          dating-optimizer-backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -n $NAMESPACE
        
        # Annotate deployment with rollout info
        kubectl annotate deployment/dating-optimizer-backend \
          deployment.kubernetes.io/revision-history-limit=10 \
          deployment.kubernetes.io/rollout-trigger="$(date)" \
          deployment.kubernetes.io/commit-sha=${{ github.sha }} \
          deployment.kubernetes.io/commit-author="${{ github.actor }}" \
          -n $NAMESPACE --overwrite
        
        # Wait for rollout to complete
        kubectl rollout status deployment/dating-optimizer-backend -n $NAMESPACE --timeout=600s

    - name: Run post-deployment validation
      env:
        NAMESPACE: ${{ steps.env.outputs.NAMESPACE }}
        ENVIRONMENT: ${{ steps.env.outputs.ENVIRONMENT }}
      run: |
        echo "🔍 Running post-deployment validation..."
        
        # Check deployment status
        kubectl get deployment dating-optimizer-backend -n $NAMESPACE -o wide
        
        # Check pod status
        kubectl get pods -l app=dating-optimizer-backend -n $NAMESPACE
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=dating-optimizer-backend -n $NAMESPACE --timeout=300s
        
        # Get service information
        kubectl get service dating-optimizer-backend-service -n $NAMESPACE -o wide
        
        echo "✅ Deployment validation completed successfully!"

    - name: Run smoke tests
      env:
        NAMESPACE: ${{ steps.env.outputs.NAMESPACE }}
        ENVIRONMENT: ${{ steps.env.outputs.ENVIRONMENT }}
      run: |
        echo "🧪 Running smoke tests..."
        
        # Get service endpoint
        SERVICE_URL=$(kubectl get service dating-optimizer-backend-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        if [ -z "$SERVICE_URL" ]; then
          echo "Using port-forward for testing..."
          kubectl port-forward service/dating-optimizer-backend-service 8080:80 -n $NAMESPACE &
          PORT_FORWARD_PID=$!
          SERVICE_URL="localhost:8080"
          sleep 10
        fi
        
        echo "Testing service at: http://$SERVICE_URL"
        
        # Health check
        echo "Testing health endpoint..."
        timeout 300 bash -c "until curl -f -s http://$SERVICE_URL/health > /dev/null; do echo 'Waiting...'; sleep 5; done"
        curl -f -s http://$SERVICE_URL/health | jq -e '.status == "ok"'
        
        # API status check
        echo "Testing API status endpoint..."
        curl -f -s http://$SERVICE_URL/api/v1/status | jq -e '.status == "ok"'
        
        # Database connectivity
        echo "Testing database connectivity..."
        curl -f -s http://$SERVICE_URL/api/v1/health/database | jq -e '.status == "ok"'
        
        # Authentication endpoint
        echo "Testing authentication endpoint..."
        curl -f -s http://$SERVICE_URL/api/v1/auth/status | jq -e '.status == "ok"'
        
        # Cleanup port-forward if used
        if [ ! -z "$PORT_FORWARD_PID" ]; then
          kill $PORT_FORWARD_PID
        fi
        
        echo "🎉 All smoke tests passed!"

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name mobile-apps-cluster

    - name: Get service endpoint
      id: service
      run: |
        SERVICE_URL=$(kubectl get service dating-optimizer-backend-service -n dating-optimizer-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: k6 run tests/performance/backend-load-test.js
      env:
        BASE_URL: http://${{ steps.service.outputs.SERVICE_URL }}

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=Production" >> $GITHUB_OUTPUT
          echo "ENV_EMOJI=🚀" >> $GITHUB_OUTPUT
        else
          echo "ENVIRONMENT=Staging" >> $GITHUB_OUTPUT
          echo "ENV_EMOJI=🧪" >> $GITHUB_OUTPUT
        fi

    - name: Notify Slack on Success
      if: needs.deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ${{ steps.env.outputs.ENV_EMOJI }} Dating Profile Optimizer Backend deployed successfully!
          
          📍 Environment: ${{ steps.env.outputs.ENVIRONMENT }}
          🌿 Branch: ${{ github.ref_name }}
          📝 Commit: ${{ github.sha }}
          👤 Author: ${{ github.actor }}
          ⏱️ Duration: ${{ steps.deploy.outputs.duration }}
          
          🔗 View deployment: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: needs.deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          💥 Dating Profile Optimizer Backend deployment failed!
          
          📍 Environment: ${{ steps.env.outputs.ENVIRONMENT }}
          🌿 Branch: ${{ github.ref_name }}
          📝 Commit: ${{ github.sha }}
          👤 Author: ${{ github.actor }}
          
          🔗 View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          @channel Please investigate the deployment failure.
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create GitHub deployment status
      uses: chrnorm/deployment-status@v2
      if: always()
      with:
        token: '${{ github.token }}'
        state: ${{ needs.deploy.result == 'success' && 'success' || 'failure' }}
        deployment-id: ${{ github.run_id }}
        environment-url: ${{ format('https://{0}-api.{1}', github.ref == 'refs/heads/main' && 'dating' || 'staging-dating', secrets.DOMAIN_NAME) }}